plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.google.cloud.tools.jib' version '3.3.2'
}

group = 'com.madeyepeople'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation("org.springframework.security:spring-security-messaging")
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	implementation 'org.webjars:stomp-websocket:2.3.4'
	implementation 'org.webjars:webjars-locator-core'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
//	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	compileOnly 'org.projectlombok:lombok'
	compileOnly 'org.webjars:sockjs-client:1.1.2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.kafka:spring-kafka-test'
//	testImplementation 'org.springframework.security:spring-security-test'

//	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
//	implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
//	implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

//tasks.named('test') {
//	useJUnitPlatform()
//}

/* AWS ECR */
/*
Properties properties = new Properties()
def propertiesFile = project.rootProject.file('local.properties')
if (propertiesFile.exists()) {
	properties.load(propertiesFile.newDataInputStream())
}

ext {
	aws_account_id = properties.getProperty('aws_account_id')
	aws_region = properties.getProperty('aws_region')
	aws_repository_name = properties.getProperty('aws_repository_name')
	image_url="${aws_account_id}"+'.dkr.ecr.'+"${aws_region}"+'.amazonaws.com/'+"${aws_repository_name}"
}

jib {
	from {
		image = 'eclipse-temurin:17-jdk-alpine'
	}
	to {
		image = "${image_url}"
		tags = ['latest', "${project.version}".toString()]
		credHelper = 'ecr-login'
	}
	container {
		creationTime = 'USE_CURRENT_TIMESTAMP'
		jvmFlags = ['-Dspring.profiles.active=prod', '-XX:+UseContainerSupport', '-Dserver.port=8080', '-Dfile.encoding=UTF-8']
		ports = ['8080']
		user = 'nobody:nogroup'
	}
}
*/