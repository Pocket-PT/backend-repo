name: prod-pocket-pt

on: [workflow_dispatch]

jobs:
  live-deploy:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        
      - name: Setup Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: cd pocketpt && chmod +x ./gradlew
        shell: bash
      
      - name: Build with Gradle
        run: cd pocketpt && ./gradlew build
        shell: bash
        
      - name: Copy 'docker-compose.prod.yml' to public EC2(110) instance
        uses: appleboy/scp-action@v0.1.4
        with:
          host: 43.201.94.99
          username: ubuntu
          port: 22
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "docker-compose.prod.yml"
          target: "/home/ubuntu"

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ap-northeast-2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.PROD_DOCKERHUB_USERNAME }}
          password: ${{ secrets.PROD_DOCKERHUB_TOKEN }}

      - name: Build docker file and setting deploy files
        run: |
          cd pocketpt
          docker build -t ${{ secrets.PROD_DOCKERHUB_USERNAME }}/prod-pocket-pt:latest .
          docker push ${{ secrets.PROD_DOCKERHUB_USERNAME }}/prod-pocket-pt:latest

      - name: Connect to public EC2(110) using SSH Key
        uses: appleboy/ssh-action@master
        with:
          host: 43.201.94.99
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
            chmod 600 private_key.pem

            scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.prod.yml ubuntu@10.0.120.24:/home/ubuntu/docker-compose.yml
            scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.prod.yml ubuntu@10.0.220.234:/home/ubuntu/docker-compose.yml
            rm docker-compose.prod.yml
            
            ssh -i private_key.pem ubuntu@10.0.120.24 <<EOF1
              echo "Connected to private1 EC2 instance(120)"
              sudo docker login -u "${{ secrets.PROD_DOCKERHUB_USERNAME }}" -p "${{ secrets.PROD_DOCKERHUB_TOKEN }}"
              echo "Success Docker Login"
              sudo docker pull ${{ secrets.PROD_DOCKERHUB_USERNAME }}/prod-pocket-pt:latest
              echo "Success Docker Image Pull"
              sudo docker compose down
              echo "Success Docker Compose Down"
              echo "${{ secrets.ENV_PROD_FILE }}" > .env.prod
              echo "Success Copy '.env.prod' in Instance(120)"
              echo "Success Copy 'docker-compose.yml' in Instance(120)"
              sudo docker compose up -d
              echo "Success Docker Compose up"
              exit
            EOF1
            ssh -i private_key.pem ubuntu@10.0.220.234 <<EOF2
              echo "Connected to private2 EC2 instance(220)"
              sudo docker login -u "${{ secrets.PROD_DOCKERHUB_USERNAME }}" -p "${{ secrets.PROD_DOCKERHUB_TOKEN }}"
              echo "Success Docker Login"
              sudo docker pull ${{ secrets.PROD_DOCKERHUB_USERNAME }}/prod-pocket-pt:latest
              echo "Success Docker Image Pull"
              sudo docker compose down
              echo "Success Docker Compose Down"
              echo "${{ secrets.ENV_PROD_FILE }}" > .env.prod
              echo "Success Copy '.env.prod' in Instance(220)"
              echo "Success Copy 'docker-compose.yml' in Instance(220)"
              sudo docker compose up -d
              echo "Success Docker Compose up"
              exit
            EOF2
            rm -f private_key.pem
            
      # ECR 관련 코드 주석 처리
      #- name: Login to ECR
      #  id: login-ecr
      #  uses: aws-actions/amazon-ecr-login@v1
        
      #- name: build docker file and setting deploy files
      #  env:
      #   ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #   ECR_REPOSITORY: pocket-pt
      #   IMAGE_TAG: latest
      #  run: |
      #    cd pocketpt
      #    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Connect to EC2
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: 3.34.49.69
      #     username: ubuntu
      #     key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      #     script: |
      #       aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
      #       aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #       aws configure set region ap-northeast-2
      #       aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 042973332120.dkr.ecr.ap-northeast-2.amazonaws.com
      #       # sudo aws ecr get-login --no-include-email --region ap-northeast-2
      #       # sudo $(aws ecr get-login --no-include-email --region ap-northeast-2)
      #       # docker login -u AWS -p $(aws ecr get-login-password)  042973332120.dkr.ecr.ap-northeast-2.amazonaws.com
      #       docker pull 042973332120.dkr.ecr.ap-northeast-2.amazonaws.com/pocket-pt:latest
